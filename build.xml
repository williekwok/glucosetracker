<<<<<<< HEAD
<project name="Build and Deploy a Cordova BlackBerry WebWorks Project" default="help">
<!-- 
       Licensed to the Apache Software Foundation (ASF) under one
       or more contributor license agreements.  See the NOTICE file
       distributed with this work for additional information
       regarding copyright ownership.  The ASF licenses this file
       to you under the Apache License, Version 2.0 (the
       "License"); you may not use this file except in compliance
       with the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing,
       software distributed under the License is distributed on an
       "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
       KIND, either express or implied.  See the License for the
       specific language governing permissions and limitations
       under the License.
-->    
    <!-- LOAD ANT-CONTRIB LIBRARY -->
    
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
      <classpath>
        <pathelement location="./lib/ant-contrib/ant-contrib-1.0b3.jar" />
      </classpath>
    </taskdef>

    <!-- LOAD PROPERTIES -->
    
    <property prefix="properties" file="project.properties" />
    <property name="build.dir"    location="build" />
    <property name="widget.dir"   location="${build.dir}/widget" />
    <property name="code.sign"    value="false" />
    <property name="globalization" value="false" />
        
    <target name="blackberry" >
        <property name="subant.file"  value="blackberry.xml" />
    </target>
    
    <target name="playbook" >
        <property name="subant.file"  value="playbook.xml" />
    </target>

    <target name="qnx" >
        <property name="subant.file"  value="qnx.xml" />
    </target>
    
    <target name="load-device">
        <subant target="load-device">
            <fileset dir="." includes="${subant.file}"/>
        </subant>
    </target>
    
    <target name="load-simulator">
        <subant target="load-simulator">
            <fileset dir="." includes="${subant.file}"/>
        </subant>
    </target>

    <target name="debug-simulator">
        <subant target="debug-simulator">
            <fileset dir="." includes="${subant.file}"/>
        </subant>
    </target>

    <target name="debug-device">
        <subant target="debug-device">
            <fileset dir="." includes="${subant.file}"/>
        </subant>
    </target>
    
    <target name="build">
        <subant target="build">
            <fileset dir="." includes="${subant.file}"/>
        </subant>
    </target>

    <target name="clean">
        <subant target="clean">
            <fileset dir="." includes="${subant.file}"/>
        </subant>
    </target>
    
    <target name="clean-device">
        <subant target="clean-device">
            <fileset dir="." includes="${subant.file}"/>
        </subant>
    </target>
    
    <target name="package-app">
        <subant target="package-app">
            <fileset dir="." includes="${subant.file}"/>
        </subant>
    </target>
    
    <target name="clean-simulator">
        <subant target="clean-simulator">
            <fileset dir="." includes="${subant.file}"/>
        </subant>
    </target>
    
    <!-- HELP -->
    
    <target name="help">
        <echo>
NAME
  ${ant.project.name}

SYNOPSIS
  ant TARGET COMMAND [-D&lt;argument&gt;=&lt;value&gt;]...

DESCRIPTION
  You can build and deploy your project to a device or simulator.
  
TARGETS
  blackberry ........ Builds a cod file and deploys to a device or simulator
 
  playbook .......... Builds a bar file and deploys to a device or simulator

  qnx ............... Builds a bar file and deploys to a device or simulator

COMMANDS
  help .............. Show this help menu.
                        ant, ant help

  load-device ....... Builds and deploys project to a connected USB device.
                        ant TARGET load-device

  load-simulator .... Builds and deploys project to default simulator.
                        ant TARGET load-simulator

  build ............. Compiles and packages the project for deployment.
                        ant TARGET build

  package-app ....... Packages the app into a WebWorks-compatible .zip file.
                        ant TARGET package-app

  clean ............. Remove all files from the build/ directory.
                        ant TARGET clean

  clean-device ...... Remove this project from the connected USB device.
                        ant TARGET clean-device

  clean-simulator ... Remove this project from the simulator (takes a while).
                        ant TARGET clean-simulator

GETTING STARTED
  1. Edit project.properties

  2. &lt;ant load-simulator&gt; to run the project on the simulator

  3. Customize your project by editing www/config.xml

  4. To run the project on a BlackBerry device, you will need to obtain
     code signing keys from RIM. Once you have the key, a project is
     installed by connecting a BlackBerry via USB and running
     &lt;ant load-device&gt;.
        </echo>
    </target>
=======
<?xml version="1.0" encoding="UTF-8"?>
<project name="tracker" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env" />
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME" />
    </condition>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
    />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

>>>>>>> d9873a426da8c4bf3dde3d13498eb0b74b95d7f6
</project>
